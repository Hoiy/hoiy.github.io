---
layout: post
title:  "Hosting Jekyll on GitHub Pages with MathJax support in 30 minutes"
date:   2019-02-07 16:13:00 +0800
categories: misc
---
Welcome to my first post in "{{ site.title }}".

I have been wanting to start blogging for a long time. However, I failed every time. There are so many blockers. For example, forgetting my logins to my WordPress blog, figuring out how to insert MathJax equations, getting tired of advertisements being injected, etc... Usually, after a few hours of fixing this and that, I forgot what I intended to do: blogging.

If this sounds familiar to you, let's see how we could set up a simple Jekyll blog over GitHub Pages with MathJax support in under 30 minutes and start blogging right away.

<br><br>
# Why GitHub Pages and Jekyll?

Everyone has a GitHub account, and thus access to GitHub Pages. It is free and well supported. For me, the use case is extremely simple. I only want to blog. I don't need a fancy media library, nor a comment management system. I don't have 10 authors to manage. I don't even want to deal with my domain name.

I only need a static site with MathJax supported that I could quickly share my findings without much hassle. It doesn't mean Jekyll couldn't support them. For a minimalist, Jekyll is a good place to start with.

Let start the challenge of building a Jekyll blog in 30 minutes!

<br><br>
# 1. Create a GitHub repository for your GitHub page (3 mins)

To get started, simply create a special repository named `<github_user_name>.github.io` in your GitHub account. Everything within the repository will be served through `https://<github_user_name>.github.io`. No setup is required.

You may refer to [this page](https://pages.github.com/) for more details.

<br><br>
# 2. Install Jekyll in local (15 mins)
Follow the instruction in [this page](https://jekyllrb.com/docs/installation/) on how to install Jekyll in your local environment.

For example, I install Jekyll on macOS by doing the followings.
{% highlight bash %}
> xcode-select --install # to install prerequisite packages
> gem install --user-install bundler jekyll # to install jekyll gem
{% endhighlight %}

Edit `~/.bash_profile` to include the gem path:
{% highlight bash %}
export GEM_HOME=$HOME/.gem/ruby/2.3.0/bin
export PATH=$GEM_HOME:$PATH
{% endhighlight %}

Execute the `jekyll` command to make sure that everything is working as expected.
{% highlight bash %}
> jekyll -v
jekyll 3.8.5
{% endhighlight %}

<br><br>
# 3. Create a Jekyll site in local (5 mins)
Next, clone the GitHub repository to local and create a new Jekyll site.

{% highlight bash %}
> git clone https://github.com/<github_user_name>/<github_user_name>.github.io
> cd <github_user_name>.github.io
> jekyll new .
{% endhighlight %}

Jekyll creates a bunch of files for your static site. You may want to learn about how to (config)[https://jekyllrb.com/docs/configuration/] and (use)[https://jekyllrb.com/docs/usage/] Jekyll later.

For now, we only want to set up some basic configuration. Fire up your favourite editor, go ahead and edit `_config.yaml` for basic information like title and description.

Execute `jekyll s` (`s` stands for `serve`) and browse to `127.0.0.1:4000` to preview your site.

<br><br>
# 4. Deploy the Jekyll site (1 min)
To deploy your site to `https://<your_user_name>.github.io` is simple. Just build, commit and push all the files generated by Jekyll to GitHub and you are done.

{% highlight bash %}
> jekyll build
> git add .
> git commit -m "Jekyll blog initial commit"
> git push
{% endhighlight %}

<br><br>
# 5. Adding the first post (1 min)
Simply edit the `_posts` folder, each post should have a file name `<year>-<month>-<day>-<post-title>.md`. It should be pretty easy for everyone to create a new post following the default template without looking at any documentation. For example,
```markdown
---
layout: post
title:  "My Awesome Post"
date:   2019-02-07 16:00:00 +0800
categories: misc
---
Your blog content in markdown!
```

<br><br>
# 6. Adding MathJax support (5 mins)
By default, Jekyll uses `kramdown` as its markdown engine. The great thing about `kramdown` is that it supports LaTeX directly so you could just use `$$` in your markdown file to inject LaTeX code into your post.

To allow the rendering of MathJax code, make your theme loads the MathJax script.

The default theme of Jekyll is `minima` as defined in `_config.yml`. Themes are installed as gems. We are going to override the `_includes/head.html` of `minima`. To do this, copy `_includes/head.html` from `minima` package to our local repository.

{% highlight bash %}
> mkdir -p _includes && cp $(bundle show minima)/_includes/head.html _includes/head.html
{% endhighlight %}

Now edit `_includes/head.html` in local repository and add the following between the `<head>` tags.
```html
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML" async></script>
```
Add `$$\LaTeX$$` to your blog post and it should now render $$\LaTeX$$. Congratulation! Your blog now supports using MathJax.

<br><br>
# Conclusion

We have gone through the process of setting up a Jekyll static site over GitHub for free in 30 minutes. There are a lot of [plugins](https://github.com/planetjekyll/awesome-jekyll-plugins) and [themes](https://github.com/planetjekyll/awesome-jekyll-themes) to be explored. You may want to go through [a showcase list](https://jekyllrb.com/showcase/) on how a Jekyll site could look like as well. Happy blogging!
